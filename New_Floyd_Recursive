import sys
import itertools
import unittest

sys.setrecursionlimit(1000)

n = 4
INF = 99999999

graph = [[0, 4, INF, 7],
         [INF, 0, 3, INF],
         [INF, INF, 0, 6],
         [7, INF, INF, 0]]

def shortest_path(i, j, k, graph):
    if k == 0:
        return graph[i][j]
    else:
        without_k = shortest_path(i, j, k-1, graph)
        with_k = shortest_path(i, k, k-1, graph) + shortest_path(k, j, k-1, graph)
        return min(without_k, with_k)

def floyd(graph):
    for k in range(n):
        for i in range(n):
            for j in range(n):
                graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])
    return graph

if __name__ == '__main__':
    print("Following matrix shows the shortest distances between every pair of vertices:")
    for row in floyd(graph):
        print(" ".join(map(str, row)))
if __name__ == '__main__':    
    unittest.main()
